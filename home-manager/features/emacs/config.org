#+TITLE: 0poss's emacs config
#+AUTHOR: 0poss

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (delete-selection-mode t)
    (setq custom-file
	  (concat user-emacs-directory "custom.el"))
    (load custom-file)

    :custom
    (tab-always-indent 'complete)
    (visible-bell t)
    (cursor-type 'bar))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :config
    (recentf-mode t))
#+END_SRC

** Key-bindings
#+BEGIN_SRC emacs-lisp
  (use-package major-mode-hydra
    :disabled

    :ensure t

    :bind
    ("M-SPC" . major-mode-hydra))

  (use-package pretty-hydra
    :ensure t)
#+END_SRC

** Window & Frame Management
*** Font
default-font-presets - lets user specify presets for the default-font, with utilities to scale and cycle fonts.
#+BEGIN_SRC emacs-lisp
  (use-package default-font-presets
    :ensure t

    :bind
    (("C-+" . default-font-presets-scale-increase)
     ("C--" . default-font-presets-scale-decrease)
     ("C-=" . default-font-presets-scale-reset)
     ("C-M-+" . default-font-presets-forward)
     ("C-M--" . default-font-presets-backward)
     ("<C-mouse-4>" . default-font-presets-scale-increase)
     ("<C-mouse-5>" . default-font-presets-scale-decrease))

    :init
    (add-to-list 'default-frame-alist
		 '(font . "Berkeley Mono-9"))

    :config
    (setq default-font-presets-list
	  (list "Berkeley Mono-9"
		"Iosevka Nerd Font-10"
		"Terminus-9")))
#+END_SRC

*** Layout
winner - [built-in] “Undo”(and “redo”) changes in the window configuration with the key commands.
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :hook
    (after-init . winner-mode)

    :custom
    (winner-boring-buffers-regexp '("\*.*\*")))
#+END_SRC

*** Switching
ace-window - Quickly switch windows.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t

    :bind
    (([remap other-window] . ace-select-window)
     ([remap delete other-windows] . ace-delete-other-windows))

    :pretty-hydra
    ("Actions"
     (("TAB" other-window "switch")
      ("s" ace-swap-window "swap")
      ("a" ace-select-window "select")
      ("d" ace-delete-window "delete")
      ("D" ace-delete-other-windows "delete others"))
     "Resize"
     (("h" shrink-window-horizontally "shrink horizontally")
      ("j" enlarge-window "enlarge vertically")
      ("k" shrink-window "shrink vertically")
      ("l" enlarge-window-horizontally "enlarge horizontally"))
     "Split"
     (("b" split-window-below "below")
      ("r" split-window-right "right"))
     "Undo/Redo"
     (("C-u" winner-undo "undo")
      ("C-r" winner-redo "redo")))

    :bind
    ("C-c w" . ace-window-hydra/body)

    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC

** Minibuffer
vertico - Vertico provides a minimalistic vertical completion UI, which is based on the default completion system.
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t

    :config
    (vertico-mode t)
    (setq vertico-cycle t))
#+END_SRC

Marginalia - Rich annotations in the minibuffer
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :ensure t

    :config
    (marginalia-mode t))
#+END_SRC

Embark - Minibuffer actions and context menu
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :disabled)
#+END_SRC

Consult - Useful search and navigation commands
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :ensure t

    :bind
    (([remap goto-line]        . consult-goto-line)
     ([remap isearch-forward]  . consult-line)
     ([remap switch-to-buffer] . consult-buffer)

     ("M-s j" . consult-grep)
     ("M-s S-j" . consult-ripgrep)
     ("M-s M-j" . consult-git-grep)
     ("M-s k" . consult-find)
     ("M-s S-k" . consult-locate)
     ("M-s M-k" . consult-fd)

     ("M-g g" . consult-goto-line)
     ("M-g M-g" . consult-goto-line)
     ("M-g m" . consult-mark)
     ("M-g M-m" . consult-global-mark)
     ("M-g i" . consult-imenu)

     ("M-g t" . consult-theme)))
#+END_SRC

*** Fuzzy & Narrowing
Orderless - Advanced completion style
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t

    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))))
    (orderless-component-separator #'orderless-escapable-split-on-space))
#+END_SRC

** Navigation
#+BEGIN_SRC emacs-lisp
  (use-package sr-speedbar
    :ensure t

    :custom
    (speedbar-show-unknown-files t)
    (speedbar-use-images t)
    (speedbar-vc-do-check nil)

    :bind
    (("C-t" . sr-speedbar-toggle)
     :map speedbar-key-map
     ("o" . speedbar-expand-line-descendants)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :disabled

    :ensure t

    :config
    (setq neo-theme nil)

    :custom
    (neo-window-position "right")

    :bind
    (("C-t" . neotree-toggle)))
#+END_SRC

Avy - Jump to visible text using a char-based decision tree.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t

    :bind
    ("M-s M-s" . avy-goto-char-2))
#+END_SRC

anzu - displays current match and total matches.
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :ensure t

    :config
    (global-anzu-mode t))
#+END_SRC

** Editing Enhancement
*** Massive Edit
Multiple cursors - Mark, edit multiple lines at once.
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t

    :bind
    (:prefix
     "M-n"
     :prefix-map
     oposs/multiple-cursors-map
     ("l" . mc/edit-lines)
     ("k" . mc/mark-all-like-this)
     ("j" . mc/all-in-region)))
#+END_SRC

*** Quotes & Parenthesis & Delimiters Handling
SmartParens - Deals with parens pairs and tries to be smart about it.
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t

    :config
    (require 'smartparens-config)
    (show-smartparens-global-mode t)

    :hook
    ((prog-mode) . turn-on-smartparens-strict-mode)

    :bind
    (("C-M-f" . sp-forward-sexp)
     ("C-M-b" . sp-backward-sexp)))
#+END_SRC

rainbow-delimiters - Highlights parentheses, brackets, and braces according to their depth.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t

    :hook
    (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Appearance
#+BEGIN_SRC emacs-lisp
  (use-package alect-themes
    :ensure t

    :config
    (load-theme 'alect-black-alt t))

  (use-package color-theme-sanityinc-tomorrow
    :ensure t)

  (use-package color-theme-modern
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package feebleline
    :ensure t

    :custom
    (feebleline-show-git-branch t)
    (feebleline-show-dir t)
    (feebleline-show-time nil)
    (feebleline-show-previous-buffer nil)

    :config
    (feebleline-mode 1))
#+END_SRC

Solaire mode - Visually distinguish file-visiting windows from other types of windows (like popups or sidebars) by giving them a slightly different background.
#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :ensure t

    :config
    (solaire-global-mode t))
#+END_SRC

all-the-icons - A package used to include fancy icons within emacs.
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)

    :ensure t)
#+END_SRC

** Keys Cheat Sheet
which-key - Display available key bindings in popup. Rewrite of guide-key with added features to improve display.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t

    :config
    (which-key-mode t)

    :custom
    (which-key-idle-delay 0.75
			  which-key-popup-type 'minibuffer))
#+END_SRC

** Programming
*** Completion
corfu - Corfu enhances the default completion in region function with a completion overlay.
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :ensure t

    :hook
    ((prog-mode text-mode) . corfu-mode)

    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-prefix 1)
    (corfu-on-exact-match nil)

    :config
    (setq corfu-map
	  (make-sparse-keymap))

    :bind
    (:map corfu-map
	  ([tab] . corfu-next)
	  ([backtab] . corfu-previous)
	  ([remap next-line] . corfu-next)
	  ([remap previous-line] . corfu-previous)
	  ("RET" . corfu-insert)))
#+END_SRC

*** Languages
#+BEGIN_SRC emacs-lisp
  (use-package nix-mode
    :ensure t

    :mode
    "\\.nix\\'")
#+END_SRC

*** LSP Client
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :ensure t

    :bind
    (:prefix
     "C-l"
     :prefix-map oposs/lsp-command-map
     ("C-a" . eglot-code-actions)
     ("= =" . eglot-format)
     ("C-r" . eglot-rename)
     ("C-d" . xref-find-definitions)
     ("C-s" . xref-find-references)
     ("C-h" . eldoc)
     ("C-p" . eglot-shutdown)
     ("C-S-p" . eglot-shutdown-all))

    :config
    (setq eglot-server-programs nil)
    (add-to-list 'eglot-server-programs
		 '(nix-mode . ("nil"
			       :initializationOptions
			       (:formatting
				(:command [ "nixpkgs-fmt" ])
				:nix
				(:flake (:authEvalInputs t))))))

    :custom
    (eglot-autoshutdown t)

    :hook
    (nix-mode . eglot-ensure))
#+END_SRC
