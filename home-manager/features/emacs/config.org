#+TITLE: 0poss's emacs config
#+AUTHOR: 0poss

TODO : Don't auto-jump in help buffer

* Basic Configuration
** Emacs Behavior
*** Editing text
Disable those trailing whitespaces.
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook #'whitespace-cleanup)
#+END_SRC

This minor mode makes Emacs smartest about where words here. It makes jumping in
camelCase words possible, but only in ~prog-mode~.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'subword-mode)
#+END_SRC

**** Indentation
Spaces over tabs, because ofc.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (add-hook 'prog-mode-hook
            (lambda () (setq indent-tabs-mode
                             nil)))
#+END_SRC

*** Cursor
Smoother scrolling (don't make the screen jump for the cursor to be centered
and have a margin bewteen the cursor and the last or first line of the screen).
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 101
        scroll-margin 2)
#+END_SRC

I also prefer the bar cursor.
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'bar)
#+END_SRC

Highlight current line in ~prog-mode~.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'hl-line-mode)
#+END_SRC

*** Programming Modes
**** Lines Number
Display line numbers on the left-side of the buffer for all programming modes.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+END_SRC

*** Cleaning
**** Backups
I don't want these dirty backups laying everywhere. I also want them numbered
and keep a bunch of em instead something goes wrong for a while.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("" . "~/.emacs.d/.backups"))
        backup-by-copying t
        make-backup-files t
        version-control t
        delete-old-versions t
        kept-old-versions 10
        kept-new-versions 10
        vc-make-backup-files t)
#+END_SRC

**** Autosaving
Similarly, I want my files to be automatically saved every 30s (that's the
default actually) and every 100 inputs.
#+BEGIN_SRC emacs-lisp
  (setq auto-save-timeout 30
        auto-save-interval 100)
#+END_SRC

**** Custom File
I don't want Emacs to pollute my ~init.el~ with custom variables, put it in another file.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

**** Scratch
Set a nice message in the scratch buffer.
#+BEGIN_SRC emacs-lisp
  (defun oposs/date-to-int (str)
    (time-convert (date-to-time str) 'integer))

  (defun oposs/random-date (&optional start-date end-date)
    (let ((start-date (oposs/date-to-int (or start-date "1600-01-01 00:00")))
          (end-date (oposs/date-to-int (or end-date "2300-01-01 00:00"))))
      (+ start-date (random (- end-date start-date)))))

  (defun oposs/get-locale-day (index)
    (format-time-string
     "%A"
     (encode-time
      (decoded-time-add
       (parse-time-string "1970-01-04 00:00")
       (make-decoded-time :day index)))))

  (defun oposs/doomsday-one (&optional target-date)
    "Play a single instance of Conway's Doomsday game."
    (interactive)
    (setq target-date (cond ((stringp target-date) (oposs/date-to-int target-date))
                            ((numberp target-date) target-date)
                            ((oposs/random-date)))
          begin-time (current-time))
    (if (string=
         (format-time-string "%A" target-date)
         (nth 1
              (read-multiple-choice
               (format "On what day did %s fall ?" (format-time-string "%B %d, %Y" target-date))
               (mapcar (lambda (i) (list (string-to-char (int-to-string i))
                                         (oposs/get-locale-day i)))
                       (number-sequence 0 6)))))
        (let ((time-delta (float-time (time-since begin-time))))
          (message (concat "Good job. Time taken : " (number-to-string time-delta) "s."))
          t)
      (progn
        (message "WRONG !!!")
        nil)))

  (defun oposs/doomsday-one-or-quit (&optional target-date)
    "Play a single instance of Conway's Doomsday game. Kills Emacs if you fail."
    (interactive)
    (unless (oposs/doomsday-one target-date)
      (sleep-for 1)
      (kill-emacs)))

  (defun oposs/doomsday-game ()
    "Play Conway's Doomsday game."
    (interactive)
    (defun oposs/doomsday-loop (date)
      (while (not (oposs/doomsday-one date))
        (sleep-for 1)))
    (while t
      (oposs/doomsday-loop (oposs/random-date))
      (sleep-for 2)))

  (defun oposs/random-elem (list)
    (nth (random (length list)) list))

  (defalias 'oposs/play-game 'oposs/doomsday-one)
  (setq oposs/greeting-messages
        (list
         (concat
          ";; EMACS " emacs-version " TRIAL\n"
          ";; " (int-to-string (+ 1 (random 30))) " DAYS REMAINING\n"
          ";; Join the Church of St IGNUcius and get Emacs and much more\n\n")

         (concat ";; Happy Hacking, " user-login-name " !\n\n")

         ";; Hi stranger.\n;; It's okay.\n;; You can look at my font.\n\n"

         ;;(concat
         ;; ";; Hello " user-login-name ". *scary high pitched laugh*\n"
         ;; ";; You don't know me but I know you.\n"
         ;; ";; I want to play a game.\n"
         ;; ";; Eval this buffer.\n\n"
         ;; "(unless (oposs/play-game) (sleep-for 1) (kill-emacs))")
         ))

  (setq-default initial-scratch-message
                (oposs/random-elem oposs/greeting-messages))
  (add-hook 'after-init-hook 'oposs/doomsday-one-or-quit)
#+END_SRC

*** Emacs Politeness
I don't want to type "yes" or "no" in full letters, "y" and "n" are enough.
#+BEGIN_SRC emacs-lisp
  (setq use-short-answer t)
#+END_SRC

*** Misc
Increase Emacs's default undo memory and enable auto-save.
#+BEGIN_SRC emacs-lisp
  (setq undo-limit (* 1024 1024 10)
        auto-save-default t)
#+END_SRC

Make Emacs take space from other windows when resizing.
#+BEGIN_SRC emacs-lisp
  (setq window-combination-resize t)
#+END_SRC

** Visual Configuration
Disable the sound bell.
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

Make cursor stretch over long character (e.g. tabs).
#+BEGIN_SRC emacs-lisp
  (setq x-stretch-cursor t)
#+END_SRC

Draw underline a little bit lower.
#+BEGIN_SRC emacs-lisp
  (setq x-underline-at-descent-line t)
#+END_SRC

Did you know Emacs could be transparent ?
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(alpha-background . 0.90))
#+END_SRC

*** Modeline Modules
Display battery indicator only if a battery is available.
#+BEGIN_SRC emacs-lisp
  (let ((battery-str (battery)))
    (unless (or (equal "Battery status not available" battery-str)
                (string-match-p (regexp-quote "N/A") battery-str))
      (display-battery-mode t)))
#+END_SRC

Display column number in modeline.
#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
#+END_SRC

*** Fonts
#+BEGIN_SRC emacs-lisp
  (setq oposs/font (cond
                    ((find-font (font-spec :name "Berkeley Mono"))
                     "Berkeley Mono-10.5")
                    ((find-font (font-spec :name "Iosevka"))
                     "Iosevka-10.5")
                    ((find-font (font-spec :name "Terminus"))
                     "Terminus-10.5")))

  (custom-set-faces '(fixed-pitch ((t :family oposs/font)))
                    '(font ((t :family oposs/font))))
#+END_SRC

* Package Management
** Repositories
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))
#+END_SRC

Bootstrap ~straight.el~.
Straight provides reproducibility and Git-cloned packages.
#+BEGIN_SRC emacs-lisp
  (setq straight-check-for-modifications '(check-on-save find-when-checking))

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

If ~:fork t~ is set with ~use-package~, ~straight.el~ will try to clone the repo on a different username but on the same host.
#+BEGIN_SRC emacs-lisp
  (setq straight-host-usernames
        '((github . "0poss")))
#+END_SRC

Install ~use-package~.
Also enable some debugging if Emacs is ran with ~-debug-init~.
#+BEGIN_SRC emacs-lisp
  (if init-file-debug
      (setq use-package-verbose t
            use-package-minimum-reported-time 0
            use-package-compute-statistics t
            use-package-inject-hooks t
            debug-on-error t)
    (setq use-package-expand-minimally t))

  (straight-use-package '(use-package :build t))
  (setq use-package-always-ensure t)
#+END_SRC

* Keybinding Management
** Which-key
A kinda "keybinding autosuggestion".
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight (:build t)
    :defer t
    :init (which-key-mode t)
    :diminish which-key-mode
    :custom
    (which-key-idle-delay 0.75)
    (which-key-popup-type 'minibuffer))
#+END_SRC

** Hydra
#+BEGIN_SRC emacs-lisp
  (use-package pretty-hydra
    :straight (:build t))
#+END_SRC

* Packages Configuration
** Autocompletion
*** Vertico
Absolutely necessary package.
Vertico provides a UI for basically all completions.
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :straight (:build t)
    :init
    (vertico-mode t)
    :custom
    (vertico-cycle t))
#+END_SRC

*** Marginalia
Marginalia provides annotations next to minibuffer completions.
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :straight (:build t)
    :init
    (marginalia-mode t))
#+END_SRC

*** Corfu
I prefer corfu to company, it has less complexity and works fine almost out-of-the-box.
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :straight (:build t)

    :hook (after-init . global-corfu-mode)

    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-prefix 1)
    (corfu-on-exact-match nil)

    :config
    ;; For Corfu I don't want keybindings that I have not explicitly configured.
    (setq corfu-map (make-sparse-keymap))

    :bind
    (:map corfu-map
          ([tab] . corfu-next)
          ([backtab] . corfu-previous)
          ([remap next-line] . corfu-next)
          ([remap previous-line] . corfu-previous)
          ([up] . corfu-popupinfo-scroll-down)
          ([down] . corfu-popupinfo-scroll-up)
          ("M-d" . corfu-popupinfo-toggle)
          ("RET" . corfu-insert)))
#+END_SRC

Bring recently used options up the list.
#+BEGIN_SRC emacs-lisp
  (use-package corfu-history
    :hook (global-corfu-mode . corfu-history-mode))
#+END_SRC

Display documentation next to the selected completion entry.
#+BEGIN_SRC emacs-lisp
  (use-package corfu-popupinfo
    :hook (global-corfu-mode . corfu-popupinfo-mode)
    :commands (corfu-popupinfo-scroll-down
               corfu-popupinfo-scroll-up)
    :custom
    (corfu-popupinfo-delay 0.0))
#+END_SRC

Make corfu work in the terminal.
#+BEGIN_SRC emacs-lisp
  (use-package corfu-terminal
    :straight (:build t)
    :if (not (display-graphic-p))
    :hook (global-corfu-mode . corfu-terminal-mode))
#+END_SRC

Display some nice little icons at the left of the completion entry.
#+BEGIN_SRC emacs-lisp
  (use-package kind-icon
    :straight (:build t)
    :after corfu
    :commands (kind-icon-margin-formatter)
    :custom
    (kind-icon-default-face 'corfu-default)
    :config
    (add-to-list 'corfu-margin-formatters
                 #'kind-icon-margin-formatter)
    (unless (display-graphic-p)
      (setq kind-icon-use-icons nil)))
#+END_SRC

*** Orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :straight (:build t)
    :defer t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))))
    (orderless-component-separator #'orderless-escapable-split-on-space))
#+END_SRC

*** Yasnippet
Get those snippets.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :disabled
    :straight (:build t)
    :defer t
    :init
    (yas-global-mode))

  (use-package yasnippet-snippets
    :disabled
    :straight (:build t)
    :defer t
    :after yasnippet)
#+END_SRC

*** Eglot
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :straight (:build t)
    :bind
    (:prefix
     "C-l"
     :prefix-map oposs/lsp-command-map
     ("C-a" . eglot-code-actions)
     ("= =" . eglot-format)
     ("C-r" . eglot-rename)
     ("C-d" . xref-find-definitions)
     ("C-s" . xref-find-references)
     ("C-h" . eldoc)
     ("C-p" . eglot-shutdown)
     ("C-S-p" . eglot-shutdown-all))
    :config
    (setq eglot-server-programs nil)
    (add-to-list 'eglot-server-programs
                 '(nix-mode . ("nil"
                               :initializationOptions
                               (:formatting
                                (:command [ "nixpkgs-fmt" ])
                                :nix
                                (:flake (:authEvalInputs t))))))
    :custom
    (eglot-autoshutdown t)
    (read-process-output-max (* 1024 1024))
    :hook (nix-mode . eglot-ensure))
#+END_SRC

*** Languages
**** Nix
Have that ~nix-mode~.
#+BEGIN_SRC emacs-lisp
  (use-package nix-mode
    :straight (:build t)
    :mode
    "\\.nix\\'")
#+END_SRC

** Applications
*** Version Control
**** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight (:build t)
    :commands (magit
               magit-blame
               magit-clone
               magit-diff
               magit-init
               magit-status
               magit-stage-file
               magit-unstage-file))
#+END_SRC

*** Project Management
**** Recentf
Keep track of the last 100 opened files.
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :straight (:build t :type built-in)
    :hook
    (after-init . recentf-mode)
    :custom
    (recentf-max-saved-items 100))
#+END_SRC

** Motion
*** Consult
Consult provides some nice search and navigation commands.
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :straight (:build t)
    :bind
    (([remap goto-line]        . consult-goto-line)
     ([remap switch-to-buffer] . consult-buffer)

     ("M-s l" . consult-line)
     ("M-s j" . consult-grep)
     ("M-s S-j" . consult-ripgrep)
     ("M-s M-j" . consult-git-grep)
     ("M-s k" . consult-find)
     ("M-s S-k" . consult-locate)
     ("M-s M-k" . consult-fd)

     ("M-g g" . consult-goto-line)
     ("M-g M-g" . consult-goto-line)
     ("M-g m" . consult-mark)
     ("M-g M-m" . consult-global-mark)
     ("M-g i" . consult-imenu)
     ("M-g r" . consult-recent-file)

     ("M-g t" . consult-theme)))
#+END_SRC

*** Avy
Replacement for ~vim-sneak~
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :straight (:build t)
    :bind ("M-s M-s" . avy-goto-char-2))
#+END_SRC

** Window Management
*** Winner
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :straight (:build t :type built-in)
    :commands (winner-undo winner-redo)
    :hook
    (after-init . winner-mode)
    :custom
    (winner-boring-buffers-regexp '("\\*.*\\*"))
    ;; We're gonna bind them while configuring ace-window.
    (winner-dont-bind-my-keys t))
#+END_SRC

*** Ace-window
Nice window management keybindings.
I also setup a little window management menu with ~pretty-hydra~.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :straight (:build t)
    :commands
    (ace-swap-window
     ace-select-window
     ace-delete-window
     acde-delete-other-windows)
    :bind
    ([remap other-window] . ace-select-window)
    :pretty-hydra
    ("Actions"
     (("TAB" other-window "switch")
      ("s" ace-swap-window "swap")
      ("a" ace-select-window "select")
      ("d" ace-delete-window "delete")
      ("D" ace-delete-other-windows "delete others"))
     "Resize"
     (("h" shrink-window-horizontally "shrink horizontally")
      ("j" enlarge-window "enlarge vertically")
      ("k" shrink-window "shrink vertically")
      ("l" enlarge-window-horizontally "enlarge horizontally"))
     "Split"
     (("b" split-window-below "below")
      ("r" split-window-right "right"))
     "Undo/Redo"
     (("C-u" winner-undo "undo")
      ("C-r" winner-redo "redo")))
    :bind
    ("C-c w" . ace-window-hydra/body)
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC

** File Management
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :disabled
    :straight (:build t)
    :custom
    (treemacs-identation 1)
    (treemacs-identation-string " ")
    (treemacs-width 22)
    (treemacs-position 'right)
    (treemacs-select-when-already-in-treemacs 'close)
    (treemacs-show-cursor t)
    :config
    (treemacs-resize-icons 17)
    :bind
    (("C-t" . treemacs-select-window)))
#+END_SRC

** Massive Edits
*** Multiple cursors
Multiple cursors.
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :straight (:build t)
    :bind
    (:prefix
     "M-n"
     :prefix-map
     oposs/multiple-cursors-map
     ("l" . mc/edit-lines)
     ("k" . mc/mark-all-like-this)
     ("j" . mc/all-in-region)))
#+END_SRC

** Edition Enhancement
*** Tokens
**** Smartparens
Smartparens provides a mode automatically inserting closing delimiters and
commands to move between matching delimiters.
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :straight (:build t)
    :config
    (require 'smartparens-config)
    (show-smartparens-global-mode t)
    :hook
    (prog-mode . turn-on-smartparens-mode)
    :bind
    (("C-M-f" . sp-forward-sexp)
     ("C-M-b" . sp-backward-sexp)))
#+END_SRC

** Appearance
*** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight (:build t)
    :hook (after-init . doom-modeline-mode))
#+END_SRC

*** Tokens
**** Rainbow Delimiters
One color for each delimiters (parentheses, brackets, etc.) pairs.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight (:build t)
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+END_SRC

**** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :straight (:build t)
    :defer t)

  (use-package alect-themes
    :straight (:build t)
    :defer t)

  (use-package color-theme-sanityinc-tomorrow
    :straight (:build t)
    :defer t)

  (use-package color-theme-modern
    :straight (:build t)
    :defer t)

  (use-package haki-theme
    :straight (:build t)
    :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook (defun oposs/load-theme ()
                               (load-theme 'haki t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :straight (:build t)
    :hook (after-init . turn-on-undo-tree-mode)
    :custom
    (undo-tree-visualizer-diff t))
#+END_SRC
